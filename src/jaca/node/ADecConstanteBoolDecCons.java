/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.node;

import jaca.analysis.*;

@SuppressWarnings("nls")
public final class ADecConstanteBoolDecCons extends PDecCons
{
    private TConstante _constante_;
    private TBooleano _booleano_;
    private PInicializar _inicializar_;
    private TPontoevirgula _pontoevirgula_;

    public ADecConstanteBoolDecCons()
    {
        // Constructor
    }

    public ADecConstanteBoolDecCons(
        @SuppressWarnings("hiding") TConstante _constante_,
        @SuppressWarnings("hiding") TBooleano _booleano_,
        @SuppressWarnings("hiding") PInicializar _inicializar_,
        @SuppressWarnings("hiding") TPontoevirgula _pontoevirgula_)
    {
        // Constructor
        setConstante(_constante_);

        setBooleano(_booleano_);

        setInicializar(_inicializar_);

        setPontoevirgula(_pontoevirgula_);

    }

    @Override
    public Object clone()
    {
        return new ADecConstanteBoolDecCons(
            cloneNode(this._constante_),
            cloneNode(this._booleano_),
            cloneNode(this._inicializar_),
            cloneNode(this._pontoevirgula_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADecConstanteBoolDecCons(this);
    }

    public TConstante getConstante()
    {
        return this._constante_;
    }

    public void setConstante(TConstante node)
    {
        if(this._constante_ != null)
        {
            this._constante_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._constante_ = node;
    }

    public TBooleano getBooleano()
    {
        return this._booleano_;
    }

    public void setBooleano(TBooleano node)
    {
        if(this._booleano_ != null)
        {
            this._booleano_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._booleano_ = node;
    }

    public PInicializar getInicializar()
    {
        return this._inicializar_;
    }

    public void setInicializar(PInicializar node)
    {
        if(this._inicializar_ != null)
        {
            this._inicializar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._inicializar_ = node;
    }

    public TPontoevirgula getPontoevirgula()
    {
        return this._pontoevirgula_;
    }

    public void setPontoevirgula(TPontoevirgula node)
    {
        if(this._pontoevirgula_ != null)
        {
            this._pontoevirgula_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pontoevirgula_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._constante_)
            + toString(this._booleano_)
            + toString(this._inicializar_)
            + toString(this._pontoevirgula_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._constante_ == child)
        {
            this._constante_ = null;
            return;
        }

        if(this._booleano_ == child)
        {
            this._booleano_ = null;
            return;
        }

        if(this._inicializar_ == child)
        {
            this._inicializar_ = null;
            return;
        }

        if(this._pontoevirgula_ == child)
        {
            this._pontoevirgula_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._constante_ == oldChild)
        {
            setConstante((TConstante) newChild);
            return;
        }

        if(this._booleano_ == oldChild)
        {
            setBooleano((TBooleano) newChild);
            return;
        }

        if(this._inicializar_ == oldChild)
        {
            setInicializar((PInicializar) newChild);
            return;
        }

        if(this._pontoevirgula_ == oldChild)
        {
            setPontoevirgula((TPontoevirgula) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
