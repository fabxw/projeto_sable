/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.node;

import jaca.analysis.*;

@SuppressWarnings("nls")
public final class ARelacaoInicialRelacaoInicial extends PRelacaoInicial
{
    private TClasse _classe_;
    private TIdClasse _idClasse_;
    private TFilha _filha_;
    private PIdClasseSeguinte _idClasseSeguinte_;

    public ARelacaoInicialRelacaoInicial()
    {
        // Constructor
    }

    public ARelacaoInicialRelacaoInicial(
        @SuppressWarnings("hiding") TClasse _classe_,
        @SuppressWarnings("hiding") TIdClasse _idClasse_,
        @SuppressWarnings("hiding") TFilha _filha_,
        @SuppressWarnings("hiding") PIdClasseSeguinte _idClasseSeguinte_)
    {
        // Constructor
        setClasse(_classe_);

        setIdClasse(_idClasse_);

        setFilha(_filha_);

        setIdClasseSeguinte(_idClasseSeguinte_);

    }

    @Override
    public Object clone()
    {
        return new ARelacaoInicialRelacaoInicial(
            cloneNode(this._classe_),
            cloneNode(this._idClasse_),
            cloneNode(this._filha_),
            cloneNode(this._idClasseSeguinte_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARelacaoInicialRelacaoInicial(this);
    }

    public TClasse getClasse()
    {
        return this._classe_;
    }

    public void setClasse(TClasse node)
    {
        if(this._classe_ != null)
        {
            this._classe_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classe_ = node;
    }

    public TIdClasse getIdClasse()
    {
        return this._idClasse_;
    }

    public void setIdClasse(TIdClasse node)
    {
        if(this._idClasse_ != null)
        {
            this._idClasse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._idClasse_ = node;
    }

    public TFilha getFilha()
    {
        return this._filha_;
    }

    public void setFilha(TFilha node)
    {
        if(this._filha_ != null)
        {
            this._filha_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._filha_ = node;
    }

    public PIdClasseSeguinte getIdClasseSeguinte()
    {
        return this._idClasseSeguinte_;
    }

    public void setIdClasseSeguinte(PIdClasseSeguinte node)
    {
        if(this._idClasseSeguinte_ != null)
        {
            this._idClasseSeguinte_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._idClasseSeguinte_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._classe_)
            + toString(this._idClasse_)
            + toString(this._filha_)
            + toString(this._idClasseSeguinte_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._classe_ == child)
        {
            this._classe_ = null;
            return;
        }

        if(this._idClasse_ == child)
        {
            this._idClasse_ = null;
            return;
        }

        if(this._filha_ == child)
        {
            this._filha_ = null;
            return;
        }

        if(this._idClasseSeguinte_ == child)
        {
            this._idClasseSeguinte_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._classe_ == oldChild)
        {
            setClasse((TClasse) newChild);
            return;
        }

        if(this._idClasse_ == oldChild)
        {
            setIdClasse((TIdClasse) newChild);
            return;
        }

        if(this._filha_ == oldChild)
        {
            setFilha((TFilha) newChild);
            return;
        }

        if(this._idClasseSeguinte_ == oldChild)
        {
            setIdClasseSeguinte((PIdClasseSeguinte) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
