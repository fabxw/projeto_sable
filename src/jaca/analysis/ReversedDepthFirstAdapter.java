/* This file was generated by SableCC (http://www.sablecc.org/). */

package jaca.analysis;

import java.util.*;
import jaca.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAProgramaPrograma(AProgramaPrograma node)
    {
        defaultIn(node);
    }

    public void outAProgramaPrograma(AProgramaPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramaPrograma(AProgramaPrograma node)
    {
        inAProgramaPrograma(node);
        {
            List<PDefClasse> copy = new ArrayList<PDefClasse>(node.getFim());
            Collections.reverse(copy);
            for(PDefClasse e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIni() != null)
        {
            node.getIni().apply(this);
        }
        if(node.getFamilia() != null)
        {
            node.getFamilia().apply(this);
        }
        outAProgramaPrograma(node);
    }

    public void inAClasseDefClasse(AClasseDefClasse node)
    {
        defaultIn(node);
    }

    public void outAClasseDefClasse(AClasseDefClasse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClasseDefClasse(AClasseDefClasse node)
    {
        inAClasseDefClasse(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        {
            List<PMetodos> copy = new ArrayList<PMetodos>(node.getMetodos());
            Collections.reverse(copy);
            for(PMetodos e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAtributos> copy = new ArrayList<PAtributos>(node.getAtributos());
            Collections.reverse(copy);
            for(PAtributos e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getIdClasse() != null)
        {
            node.getIdClasse().apply(this);
        }
        if(node.getClasse() != null)
        {
            node.getClasse().apply(this);
        }
        outAClasseDefClasse(node);
    }

    public void inARelacaoRelacao(ARelacaoRelacao node)
    {
        defaultIn(node);
    }

    public void outARelacaoRelacao(ARelacaoRelacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelacaoRelacao(ARelacaoRelacao node)
    {
        inARelacaoRelacao(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getFilha() != null)
        {
            node.getFilha().apply(this);
        }
        if(node.getIni() != null)
        {
            node.getIni().apply(this);
        }
        if(node.getClasse() != null)
        {
            node.getClasse().apply(this);
        }
        outARelacaoRelacao(node);
    }

    public void inAFamiliaFamilia(AFamiliaFamilia node)
    {
        defaultIn(node);
    }

    public void outAFamiliaFamilia(AFamiliaFamilia node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFamiliaFamilia(AFamiliaFamilia node)
    {
        inAFamiliaFamilia(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        {
            List<PRelacoes> copy = new ArrayList<PRelacoes>(node.getRelacoes());
            Collections.reverse(copy);
            for(PRelacoes e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRelacao() != null)
        {
            node.getRelacao().apply(this);
        }
        outAFamiliaFamilia(node);
    }

    public void inARelacoesRelacoes(ARelacoesRelacoes node)
    {
        defaultIn(node);
    }

    public void outARelacoesRelacoes(ARelacoesRelacoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelacoesRelacoes(ARelacoesRelacoes node)
    {
        inARelacoesRelacoes(node);
        if(node.getRelacao() != null)
        {
            node.getRelacao().apply(this);
        }
        if(node.getAmpersand() != null)
        {
            node.getAmpersand().apply(this);
        }
        outARelacoesRelacoes(node);
    }

    public void inADecObjAtributos(ADecObjAtributos node)
    {
        defaultIn(node);
    }

    public void outADecObjAtributos(ADecObjAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecObjAtributos(ADecObjAtributos node)
    {
        inADecObjAtributos(node);
        if(node.getAtributos() != null)
        {
            node.getAtributos().apply(this);
        }
        if(node.getDecObj() != null)
        {
            node.getDecObj().apply(this);
        }
        outADecObjAtributos(node);
    }

    public void inADecVarAtributos(ADecVarAtributos node)
    {
        defaultIn(node);
    }

    public void outADecVarAtributos(ADecVarAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVarAtributos(ADecVarAtributos node)
    {
        inADecVarAtributos(node);
        if(node.getAtributos() != null)
        {
            node.getAtributos().apply(this);
        }
        if(node.getDecVar() != null)
        {
            node.getDecVar().apply(this);
        }
        outADecVarAtributos(node);
    }

    public void inADecConsAtributos(ADecConsAtributos node)
    {
        defaultIn(node);
    }

    public void outADecConsAtributos(ADecConsAtributos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConsAtributos(ADecConsAtributos node)
    {
        inADecConsAtributos(node);
        if(node.getAtributos() != null)
        {
            node.getAtributos().apply(this);
        }
        if(node.getDecCons() != null)
        {
            node.getDecCons().apply(this);
        }
        outADecConsAtributos(node);
    }

    public void inADecProcedMetodos(ADecProcedMetodos node)
    {
        defaultIn(node);
    }

    public void outADecProcedMetodos(ADecProcedMetodos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecProcedMetodos(ADecProcedMetodos node)
    {
        inADecProcedMetodos(node);
        if(node.getDecProced() != null)
        {
            node.getDecProced().apply(this);
        }
        outADecProcedMetodos(node);
    }

    public void inADecFuncaoMetodos(ADecFuncaoMetodos node)
    {
        defaultIn(node);
    }

    public void outADecFuncaoMetodos(ADecFuncaoMetodos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncaoMetodos(ADecFuncaoMetodos node)
    {
        inADecFuncaoMetodos(node);
        if(node.getDecFuncao() != null)
        {
            node.getDecFuncao().apply(this);
        }
        outADecFuncaoMetodos(node);
    }

    public void inADecObjDecObj(ADecObjDecObj node)
    {
        defaultIn(node);
    }

    public void outADecObjDecObj(ADecObjDecObj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecObjDecObj(ADecObjDecObj node)
    {
        inADecObjDecObj(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getIdClasse() != null)
        {
            node.getIdClasse().apply(this);
        }
        if(node.getObj() != null)
        {
            node.getObj().apply(this);
        }
        outADecObjDecObj(node);
    }

    public void inADecVarRealDecVar(ADecVarRealDecVar node)
    {
        defaultIn(node);
    }

    public void outADecVarRealDecVar(ADecVarRealDecVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVarRealDecVar(ADecVarRealDecVar node)
    {
        inADecVarRealDecVar(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipoPrimitivo() != null)
        {
            node.getTipoPrimitivo().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outADecVarRealDecVar(node);
    }

    public void inADecConstanteRealDecCons(ADecConstanteRealDecCons node)
    {
        defaultIn(node);
    }

    public void outADecConstanteRealDecCons(ADecConstanteRealDecCons node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecConstanteRealDecCons(ADecConstanteRealDecCons node)
    {
        inADecConstanteRealDecCons(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getInicializar() != null)
        {
            node.getInicializar().apply(this);
        }
        if(node.getTipoPrimitivo() != null)
        {
            node.getTipoPrimitivo().apply(this);
        }
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        outADecConstanteRealDecCons(node);
    }

    public void inAInicializarInicializar(AInicializarInicializar node)
    {
        defaultIn(node);
    }

    public void outAInicializarInicializar(AInicializarInicializar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInicializarInicializar(AInicializarInicializar node)
    {
        inAInicializarInicializar(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getInicializacao() != null)
        {
            node.getInicializacao().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAInicializarInicializar(node);
    }

    public void inARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipoPrimitivo(ARealTipoPrimitivo node)
    {
        inARealTipoPrimitivo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealTipoPrimitivo(node);
    }

    public void inABooleanoTipoPrimitivo(ABooleanoTipoPrimitivo node)
    {
        defaultIn(node);
    }

    public void outABooleanoTipoPrimitivo(ABooleanoTipoPrimitivo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanoTipoPrimitivo(ABooleanoTipoPrimitivo node)
    {
        inABooleanoTipoPrimitivo(node);
        if(node.getBooleano() != null)
        {
            node.getBooleano().apply(this);
        }
        outABooleanoTipoPrimitivo(node);
    }

    public void inATipoClasseTipoClasse(ATipoClasseTipoClasse node)
    {
        defaultIn(node);
    }

    public void outATipoClasseTipoClasse(ATipoClasseTipoClasse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoClasseTipoClasse(ATipoClasseTipoClasse node)
    {
        inATipoClasseTipoClasse(node);
        if(node.getIdClasse() != null)
        {
            node.getIdClasse().apply(this);
        }
        outATipoClasseTipoClasse(node);
    }

    public void inATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        defaultIn(node);
    }

    public void outATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoPrimitivoTipo(ATipoPrimitivoTipo node)
    {
        inATipoPrimitivoTipo(node);
        if(node.getTipoPrimitivo() != null)
        {
            node.getTipoPrimitivo().apply(this);
        }
        outATipoPrimitivoTipo(node);
    }

    public void inATipoClasseTipo(ATipoClasseTipo node)
    {
        defaultIn(node);
    }

    public void outATipoClasseTipo(ATipoClasseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoClasseTipo(ATipoClasseTipo node)
    {
        inATipoClasseTipo(node);
        if(node.getTipoClasse() != null)
        {
            node.getTipoClasse().apply(this);
        }
        outATipoClasseTipo(node);
    }

    public void inADecFuncaoRealDecFuncao(ADecFuncaoRealDecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncaoRealDecFuncao(ADecFuncaoRealDecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncaoRealDecFuncao(ADecFuncaoRealDecFuncao node)
    {
        inADecFuncaoRealDecFuncao(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getFuncao() != null)
        {
            node.getFuncao().apply(this);
        }
        outADecFuncaoRealDecFuncao(node);
    }

    public void inADecFuncaoBooleanaExpDecFuncao(ADecFuncaoBooleanaExpDecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncaoBooleanaExpDecFuncao(ADecFuncaoBooleanaExpDecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncaoBooleanaExpDecFuncao(ADecFuncaoBooleanaExpDecFuncao node)
    {
        inADecFuncaoBooleanaExpDecFuncao(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getFuncao() != null)
        {
            node.getFuncao().apply(this);
        }
        outADecFuncaoBooleanaExpDecFuncao(node);
    }

    public void inAProcedComandoDecProced(AProcedComandoDecProced node)
    {
        defaultIn(node);
    }

    public void outAProcedComandoDecProced(AProcedComandoDecProced node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcedComandoDecProced(AProcedComandoDecProced node)
    {
        inAProcedComandoDecProced(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getProcedimento() != null)
        {
            node.getProcedimento().apply(this);
        }
        if(node.getDecProcedimento() != null)
        {
            node.getDecProcedimento().apply(this);
        }
        outAProcedComandoDecProced(node);
    }

    public void inAProcedDecProced(AProcedDecProced node)
    {
        defaultIn(node);
    }

    public void outAProcedDecProced(AProcedDecProced node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcedDecProced(AProcedDecProced node)
    {
        inAProcedDecProced(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getProcedimento() != null)
        {
            node.getProcedimento().apply(this);
        }
        outAProcedDecProced(node);
    }

    public void inASeInicialComando(ASeInicialComando node)
    {
        defaultIn(node);
    }

    public void outASeInicialComando(ASeInicialComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeInicialComando(ASeInicialComando node)
    {
        inASeInicialComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeInicialComando(node);
    }

    public void inASenaoComando(ASenaoComando node)
    {
        defaultIn(node);
    }

    public void outASenaoComando(ASenaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoComando(ASenaoComando node)
    {
        inASenaoComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getEstruturaSenao() != null)
        {
            node.getEstruturaSenao().apply(this);
        }
        outASenaoComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComando(AAtribuicaoComando node)
    {
        inAAtribuicaoComando(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getInicializacao() != null)
        {
            node.getInicializacao().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAtribuicaoComando(node);
    }

    public void inAChamdaIdComando(AChamdaIdComando node)
    {
        defaultIn(node);
    }

    public void outAChamdaIdComando(AChamdaIdComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamdaIdComando(AChamdaIdComando node)
    {
        inAChamdaIdComando(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        if(node.getChamadaOpcional() != null)
        {
            node.getChamadaOpcional().apply(this);
        }
        outAChamdaIdComando(node);
    }

    public void inABlocoComando(ABlocoComando node)
    {
        defaultIn(node);
    }

    public void outABlocoComando(ABlocoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComando(ABlocoComando node)
    {
        inABlocoComando(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoComando(node);
    }

    public void inAInicioBloco(AInicioBloco node)
    {
        defaultIn(node);
    }

    public void outAInicioBloco(AInicioBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInicioBloco(AInicioBloco node)
    {
        inAInicioBloco(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getEstruturaBloco() != null)
        {
            node.getEstruturaBloco().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        outAInicioBloco(node);
    }

    public void inAAtributosEstruturaBloco(AAtributosEstruturaBloco node)
    {
        defaultIn(node);
    }

    public void outAAtributosEstruturaBloco(AAtributosEstruturaBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtributosEstruturaBloco(AAtributosEstruturaBloco node)
    {
        inAAtributosEstruturaBloco(node);
        {
            List<PAtributos> copy = new ArrayList<PAtributos>(node.getAtributos());
            Collections.reverse(copy);
            for(PAtributos e : copy)
            {
                e.apply(this);
            }
        }
        outAAtributosEstruturaBloco(node);
    }

    public void inAComandoEstruturaBloco(AComandoEstruturaBloco node)
    {
        defaultIn(node);
    }

    public void outAComandoEstruturaBloco(AComandoEstruturaBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoEstruturaBloco(AComandoEstruturaBloco node)
    {
        inAComandoEstruturaBloco(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outAComandoEstruturaBloco(node);
    }

    public void inASenaoEstruturaSenao(ASenaoEstruturaSenao node)
    {
        defaultIn(node);
    }

    public void outASenaoEstruturaSenao(ASenaoEstruturaSenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoEstruturaSenao(ASenaoEstruturaSenao node)
    {
        inASenaoEstruturaSenao(node);
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASenaoEstruturaSenao(node);
    }

    public void inAChamaChamada(AChamaChamada node)
    {
        defaultIn(node);
    }

    public void outAChamaChamada(AChamaChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamaChamada(AChamaChamada node)
    {
        inAChamaChamada(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAChamaChamada(node);
    }

    public void inAVazioListaListaExp(AVazioListaListaExp node)
    {
        defaultIn(node);
    }

    public void outAVazioListaListaExp(AVazioListaListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioListaListaExp(AVazioListaListaExp node)
    {
        inAVazioListaListaExp(node);
        if(node.getVazioNIgnorado() != null)
        {
            node.getVazioNIgnorado().apply(this);
        }
        outAVazioListaListaExp(node);
    }

    public void inAExprListaExp(AExprListaExp node)
    {
        defaultIn(node);
    }

    public void outAExprListaExp(AExprListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprListaExp(AExprListaExp node)
    {
        inAExprListaExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExprListaExp(node);
    }

    public void inAListaExpListaExp(AListaExpListaExp node)
    {
        defaultIn(node);
    }

    public void outAListaExpListaExp(AListaExpListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExpListaExp(AListaExpListaExp node)
    {
        inAListaExpListaExp(node);
        if(node.getListasExp() != null)
        {
            node.getListasExp().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAListaExpListaExp(node);
    }

    public void inAListasExpListasExp(AListasExpListasExp node)
    {
        defaultIn(node);
    }

    public void outAListasExpListasExp(AListasExpListasExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListasExpListasExp(AListasExpListasExp node)
    {
        inAListasExpListasExp(node);
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getBarra() != null)
        {
            node.getBarra().apply(this);
        }
        outAListasExpListasExp(node);
    }

    public void inAParametroNuloParametros(AParametroNuloParametros node)
    {
        defaultIn(node);
    }

    public void outAParametroNuloParametros(AParametroNuloParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroNuloParametros(AParametroNuloParametros node)
    {
        inAParametroNuloParametros(node);
        if(node.getVazioNIgnorado() != null)
        {
            node.getVazioNIgnorado().apply(this);
        }
        outAParametroNuloParametros(node);
    }

    public void inAParametroParametros(AParametroParametros node)
    {
        defaultIn(node);
    }

    public void outAParametroParametros(AParametroParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroParametros(AParametroParametros node)
    {
        inAParametroParametros(node);
        {
            List<PConjParametros> copy = new ArrayList<PConjParametros>(node.getConjParametros());
            Collections.reverse(copy);
            for(PConjParametros e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAParametroParametros(node);
    }

    public void inAConjParametrosConjParametros(AConjParametrosConjParametros node)
    {
        defaultIn(node);
    }

    public void outAConjParametrosConjParametros(AConjParametrosConjParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConjParametrosConjParametros(AConjParametrosConjParametros node)
    {
        inAConjParametrosConjParametros(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        if(node.getBarra() != null)
        {
            node.getBarra().apply(this);
        }
        outAConjParametrosConjParametros(node);
    }

    public void inAValorRealExp(AValorRealExp node)
    {
        defaultIn(node);
    }

    public void outAValorRealExp(AValorRealExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorRealExp(AValorRealExp node)
    {
        inAValorRealExp(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outAValorRealExp(node);
    }

    public void inABoolVerdadeExp(ABoolVerdadeExp node)
    {
        defaultIn(node);
    }

    public void outABoolVerdadeExp(ABoolVerdadeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolVerdadeExp(ABoolVerdadeExp node)
    {
        inABoolVerdadeExp(node);
        if(node.getVerdade() != null)
        {
            node.getVerdade().apply(this);
        }
        outABoolVerdadeExp(node);
    }

    public void inABoolFalsoExp(ABoolFalsoExp node)
    {
        defaultIn(node);
    }

    public void outABoolFalsoExp(ABoolFalsoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolFalsoExp(ABoolFalsoExp node)
    {
        inABoolFalsoExp(node);
        if(node.getFalso() != null)
        {
            node.getFalso().apply(this);
        }
        outABoolFalsoExp(node);
    }

    public void inAIdExp(AIdExp node)
    {
        defaultIn(node);
    }

    public void outAIdExp(AIdExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdExp(AIdExp node)
    {
        inAIdExp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdExp(node);
    }

    public void inAChamdaIdExp(AChamdaIdExp node)
    {
        defaultIn(node);
    }

    public void outAChamdaIdExp(AChamdaIdExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamdaIdExp(AChamdaIdExp node)
    {
        inAChamdaIdExp(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        if(node.getChamadaOpcional() != null)
        {
            node.getChamadaOpcional().apply(this);
        }
        outAChamdaIdExp(node);
    }

    public void inAAtributoIdExp(AAtributoIdExp node)
    {
        defaultIn(node);
    }

    public void outAAtributoIdExp(AAtributoIdExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtributoIdExp(AAtributoIdExp node)
    {
        inAAtributoIdExp(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getAtributo() != null)
        {
            node.getAtributo().apply(this);
        }
        if(node.getChamadaOpcional() != null)
        {
            node.getChamadaOpcional().apply(this);
        }
        outAAtributoIdExp(node);
    }

    public void inAExpreExp(AExpreExp node)
    {
        defaultIn(node);
    }

    public void outAExpreExp(AExpreExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpreExp(AExpreExp node)
    {
        inAExpreExp(node);
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        outAExpreExp(node);
    }

    public void inANegativoExp(ANegativoExp node)
    {
        defaultIn(node);
    }

    public void outANegativoExp(ANegativoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativoExp(ANegativoExp node)
    {
        inANegativoExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outANegativoExp(node);
    }

    public void inADifExp(ADifExp node)
    {
        defaultIn(node);
    }

    public void outADifExp(ADifExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADifExp(ADifExp node)
    {
        inADifExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        outADifExp(node);
    }

    public void inAOpExp(AOpExp node)
    {
        defaultIn(node);
    }

    public void outAOpExp(AOpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpExp(AOpExp node)
    {
        inAOpExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAOpExp(node);
    }

    public void inABlocoExpExp(ABlocoExpExp node)
    {
        defaultIn(node);
    }

    public void outABlocoExpExp(ABlocoExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExpExp(ABlocoExpExp node)
    {
        inABlocoExpExp(node);
        if(node.getBlocoExp() != null)
        {
            node.getBlocoExp().apply(this);
        }
        outABlocoExpExp(node);
    }

    public void inAChamadaChamadaOpcional(AChamadaChamadaOpcional node)
    {
        defaultIn(node);
    }

    public void outAChamadaChamadaOpcional(AChamadaChamadaOpcional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaChamadaOpcional(AChamadaChamadaOpcional node)
    {
        inAChamadaChamadaOpcional(node);
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAChamadaChamadaOpcional(node);
    }

    public void inASomaOp(ASomaOp node)
    {
        defaultIn(node);
    }

    public void outASomaOp(ASomaOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaOp(ASomaOp node)
    {
        inASomaOp(node);
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        outASomaOp(node);
    }

    public void inAMenosOp(AMenosOp node)
    {
        defaultIn(node);
    }

    public void outAMenosOp(AMenosOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosOp(AMenosOp node)
    {
        inAMenosOp(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAMenosOp(node);
    }

    public void inAMultOp(AMultOp node)
    {
        defaultIn(node);
    }

    public void outAMultOp(AMultOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultOp(AMultOp node)
    {
        inAMultOp(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMultOp(node);
    }

    public void inADivOp(ADivOp node)
    {
        defaultIn(node);
    }

    public void outADivOp(ADivOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivOp(ADivOp node)
    {
        inADivOp(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivOp(node);
    }

    public void inAModOp(AModOp node)
    {
        defaultIn(node);
    }

    public void outAModOp(AModOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModOp(AModOp node)
    {
        inAModOp(node);
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        outAModOp(node);
    }

    public void inAIgualdadeOp(AIgualdadeOp node)
    {
        defaultIn(node);
    }

    public void outAIgualdadeOp(AIgualdadeOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualdadeOp(AIgualdadeOp node)
    {
        inAIgualdadeOp(node);
        if(node.getIgualdade() != null)
        {
            node.getIgualdade().apply(this);
        }
        outAIgualdadeOp(node);
    }

    public void inAMenorQueOp(AMenorQueOp node)
    {
        defaultIn(node);
    }

    public void outAMenorQueOp(AMenorQueOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorQueOp(AMenorQueOp node)
    {
        inAMenorQueOp(node);
        if(node.getMenorQue() != null)
        {
            node.getMenorQue().apply(this);
        }
        outAMenorQueOp(node);
    }

    public void inAMenorIgualQueOp(AMenorIgualQueOp node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualQueOp(AMenorIgualQueOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualQueOp(AMenorIgualQueOp node)
    {
        inAMenorIgualQueOp(node);
        if(node.getMenorIgualQue() != null)
        {
            node.getMenorIgualQue().apply(this);
        }
        outAMenorIgualQueOp(node);
    }

    public void inAAndOp(AAndOp node)
    {
        defaultIn(node);
    }

    public void outAAndOp(AAndOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndOp(AAndOp node)
    {
        inAAndOp(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndOp(node);
    }

    public void inAOuOp(AOuOp node)
    {
        defaultIn(node);
    }

    public void outAOuOp(AOuOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuOp(AOuOp node)
    {
        inAOuOp(node);
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        outAOuOp(node);
    }

    public void inAInicioConstBlocoExp(AInicioConstBlocoExp node)
    {
        defaultIn(node);
    }

    public void outAInicioConstBlocoExp(AInicioConstBlocoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInicioConstBlocoExp(AInicioConstBlocoExp node)
    {
        inAInicioConstBlocoExp(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PDecCons> copy = new ArrayList<PDecCons>(node.getDecCons());
            Collections.reverse(copy);
            for(PDecCons e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        outAInicioConstBlocoExp(node);
    }

    public void inAAtributoAtributo(AAtributoAtributo node)
    {
        defaultIn(node);
    }

    public void outAAtributoAtributo(AAtributoAtributo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtributoAtributo(AAtributoAtributo node)
    {
        inAAtributoAtributo(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAtributoAtributo(node);
    }

    public void inAParametroBoolParametro(AParametroBoolParametro node)
    {
        defaultIn(node);
    }

    public void outAParametroBoolParametro(AParametroBoolParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroBoolParametro(AParametroBoolParametro node)
    {
        inAParametroBoolParametro(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAParametroBoolParametro(node);
    }
}
